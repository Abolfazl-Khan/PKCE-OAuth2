import cookie from 'js-cookie';
import CryptoJS from 'crypto-js';

export const createRandomString = (length = 6) => {
  let allCharacters =
    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

  let randomString = '';
  for (let i = 0; i < length; i++) {
    randomString += allCharacters.charAt(
      Math.floor(Math.random() * allCharacters.length)
    );
  }

  return randomString;
};

export const getToken = () => {
  return cookie.get('token');
};

export const setToken = (token) => {
  cookie.set('token', token);
};

export const getCodeVerifier = () => {
  return cookie.get('codeVerifier');
};

export const setCodeVerifier = () => {
  const codeVerifier = createRandomString(50);
  cookie.set('codeVerifier', codeVerifier);
};

export const getClientId = () => {
  return cookie.get('clientId');
};

export const setClientId = () => {
  //clientId should be a unique Id but since we're using oauth server we will use below userId that was generated by the oauth
  const clientId = 'ZtElXGcjMbarcJduM9NVIuKX';
  // const clientId = createRandomString(24);
  cookie.set('clientId', clientId);
};

export const getClientSecret = () => {
  return cookie.get('clientSecret');
};

export const setClientSecret = () => {
  //clientSecret should be a unique for each user but since we're using oauth server we will use below userId that was generated by the oauth
  const clientSecret = 'ImhK9invtEw4fdWym1B_pM-EEXc1851npZQO1Yj2l_YbCdy1';
  // const clientSecret = createRandomString(48);
  cookie.set('clientSecret', clientSecret);
};

export const getCodeState = () => {
  return cookie.get('codeState');
};

export const setCodeState = () => {
  const codeState = createRandomString(16);
  cookie.set('codeState', codeState);
};

export const createCodeChallenge = () => {
  const codeVerifier = 'SgtZDkQSpld3yaruahngshZSDypPAhVheIYYOH5XfC2ycPmH'; //getCodeVerifier();
  const sha256Code = CryptoJS.SHA256(codeVerifier);

  const base64url = sha256Code
    .toString(CryptoJS.enc.Base64)
    .replace(/\+/g, '-')
    .replace(/\//g, '_')
    .replace(/=/g, '');
  return base64url;
};

export const getQueryParam = (key) => {
  const value = new URLSearchParams(window.location.search).get(key);
  return value;
};

export const redirector = (url) => window.location.replace(url);
